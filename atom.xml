<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Redish101 Blog</title>
  
  <subtitle>Redish101的小站</subtitle>
  <link href="https://blog.redish101.top/atom.xml" rel="self"/>
  
  <link href="https://blog.redish101.top/"/>
  <updated>2022-07-20T06:47:49.000Z</updated>
  <id>https://blog.redish101.top/</id>
  
  <author>
    <name>Redish101</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初柒科技：致力于设计与开发</title>
    <link href="https://blog.redish101.top/p/4138.html"/>
    <id>https://blog.redish101.top/p/4138.html</id>
    <published>2022-07-16T13:51:18.000Z</published>
    <updated>2022-07-20T06:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近听闻博友创业，开展了为博主<strong>免费设计Logo</strong>的活动。就我个人而言，我十分敬佩勇于创业的精神。本着尽我所能为博友宣传<del>顺便piao个Logo</del>的想法，写下这篇短文。</p><h2 id="公司介绍"><a href="#公司介绍" class="headerlink" title="公司介绍"></a>公司介绍</h2><p>武汉初柒网络科技有限公司是一家集<strong>互联网开发、网络运营 、网站建设、平面设计、小程序及APP开发服务、公司互联网服务</strong>于一体的网络科技公司。作为一家年轻公司，初柒科技注重 <strong>创新</strong> 、<strong>企业文化</strong>的塑造以及更高品质的 <strong>服务</strong> 。</p><h2 id="团队介绍"><a href="#团队介绍" class="headerlink" title="团队介绍"></a>团队介绍</h2><p>2021年7月</p><p>初柒科技前身“拾小染网络科技”公司正式成立20人工作室小组</p><p>2021年9月</p><p>“锦词”项目与云跃星灿科技达成战略合作</p><p>2021年~2022年</p><p>向高新技术企业发展</p><p>最开始了解到这家公司，是因为“与时同行”项目。这是一个致力于个人博客互联的项目，无论是<strong>项目理念</strong>还是<strong>网页设计</strong>都彰显了这家年轻公司的活力与能力。</p><p><img src="https://oc.arcitcgn.cn/2022/07/16/62d20d4104dd0.png" alt="与时同行"></p><h2 id="最新活动介绍"><a href="#最新活动介绍" class="headerlink" title="最新活动介绍"></a>最新活动介绍</h2><p><a href="https://www.8b9.cn/105/" title="初柒科技 || “扬帆起航”LOGO设计活动">初柒科技 || “扬帆起航”LOGO设计活动https://www.8b9.cn/105/</a></p><p>博主的Logo正由初柒科技设计中，在此表示感谢！</p><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p><img src="https://oc.arcitcgn.cn/2022/07/16/62d20f37d520c.jpg" alt="初柒科技公众号"></p><p>希望各位博主能够多多支持！</p><blockquote><p>宣传文案来自于：<a href="https://bowenyoung.cn/posts/chuqi/">https://bowenyoung.cn/posts/chuqi/</a>，页脚版权声明无效。</p><p>原作者版权信息：</p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220716222002.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近听闻博友创业，开展了为博主&lt;strong&gt;免费设计Logo&lt;/strong&gt;的活动。就我个人而言，我十分敬佩勇于创业的精神。本着尽我所能为博友宣传&lt;del&gt;顺便piao个Logo&lt;/del&gt;的想法，写下这篇短文。&lt;/p&gt;
&lt;h2 id=&quot;公司介绍&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Picgo + GitHub Action + npm 搭建超爽图床</title>
    <link href="https://blog.redish101.top/p/5408.html"/>
    <id>https://blog.redish101.top/p/5408.html</id>
    <published>2022-07-08T13:21:53.000Z</published>
    <updated>2022-07-08T13:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>图床，用于将本地的图片上传到互联网并生成唯一的直接链接，常常用于在网站中插入图片。目前市面上有许多的公用图床，体验也都还可以，但自己的图片放在别人的服务器多少有点不放心，要是跑路了更是直接玩完。此时有杠精要说了：“101，101，不是还有各大厂的对象储存吗”，您要是口袋比较充裕的话您就用，一个G的流量就0.5CNY，101是真的用不起。</p><h2 id="Step-1-搭建npm图床"><a href="#Step-1-搭建npm图床" class="headerlink" title="Step.1 搭建npm图床"></a>Step.1 搭建npm图床</h2><p>市面上有非常多的npm cdn，通过这些cdn，我们可以引用发布到npm的文件，例如本站的npm包是 <code>redish101-blog</code>，最新版本为 <code>1.3.656820088</code>，需要获取 <code>/public/index.html</code>，通过Jsdelivr Fastly引用，直接链接就是这样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn1.tianli0.top/npm/redish101-blog@1.3.656820088/public/index.html</span><br></pre></td></tr></table></figure><blockquote><p>这里为什么使用Fastly而非主域名(cdn1.tianli0.top)：</p><p>最近,Jsd的主域名被dns污染了，Fastly是亚洲节点，所以没有受到影响，但电信访问Fastly绝对能急死人，所以，在目前情况下来看，在生产环境下使用jsd作为cdn是非常愚蠢的行为，这将大幅度拖慢网页加载速度。</p></blockquote><blockquote><p>20220702更新: 一个不幸的消息，Fastly也炸了🙁</p></blockquote><p>同理，也可以获取发布到npm的图片。</p><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><blockquote><p>在搭建npm图床之前，需要安装npm</p></blockquote><p>首先，我们在本地创建一个npm包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> redish101-pic <span class="comment"># 新建文件夹以初始化npm包</span></span><br><span class="line"><span class="built_in">cd</span> redish101-pic <span class="comment"># 进入上一步创建的文件夹</span></span><br><span class="line">npm init <span class="comment"># 将文件夹初始化为npm包</span></span><br></pre></td></tr></table></figure><p>之后，我们可以在这个目录中存入图片。将需要的图片存入到目录之后发布到npm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login <span class="comment"># 登录到npm</span></span><br><span class="line">npm publish <span class="comment"># 上传到npm</span></span><br></pre></td></tr></table></figure><p>可以看到，第一次上传没有出现任何问题，但如果再试一次，会出现以下报错：</p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220703211438.png"></p><p>这是因为npm不允许发布重复的版本，我们需要手动更新 <code>package.json</code>中的 <code>version</code>字段更改版本，版本号需要符合<a href="https://semver.org/lang/zh-CN/">语义化版本</a>。</p><p>上传之后，我们就可以获取图片的直接链接了，格式一般为这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你的cdn地址/包名@版本号/图片的相对路径</span><br></pre></td></tr></table></figure><p>但jsd是个例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn1.tianli0.top/npm/包名@版本号/相对路径</span><br></pre></td></tr></table></figure><p>至于哪里有npm cdn可以用，请自行谷歌，101推荐eleme。</p><h2 id="Step-2-集成到Github"><a href="#Step-2-集成到Github" class="headerlink" title="Step.2 集成到Github"></a>Step.2 集成到Github</h2><p>像上面这样在本地操作图片未免有些太麻烦了，要是换了个设备就需要重装了，那么，就让我们把图片放到Github。</p><h3 id="具体操作-1"><a href="#具体操作-1" class="headerlink" title="具体操作"></a>具体操作</h3><p>首先，我们在Github新建一个仓库，仓库名随意，然后把所有图片存到这个仓库里。然后前往<a href="https://www.npmjs.com/">npm官网</a>，生成一个<code>Access Tokens</code>，保留备用。</p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220707114628.png"></p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220707114742.png"></p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220707114931.png"></p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220707115044.png"></p><p>回到Github，打开仓库设置&#x3D;&gt;secrets&#x3D;&gt;Action，新建一个Secret，名字为<code>NPM_TOKEN</code>，内容为刚才生成的Access Token，保存。</p><p>之后，写一个ci用于自动发布npm包，在仓库<code>.github/workflows</code>目录新建一个yml文件作为ci配置文件，名称随意，粘贴下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">NPM</span> <span class="string">CDN</span></span><br><span class="line"><span class="attr">&#x27;on&#x27;:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">workflow_dispatch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">JS-DevTools/npm-publish@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>试试上传一张图片，等待一会，图片就自动上传到了npm，但我们再上传一遍，会出现之前版本号重复的问题，如果你不想每次上传都更改<code>packages.json</code>，可以像我一样写一个小小的脚本，并在ci中运行，下面是参考：</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new_version.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json;</span><br><span class="line"><span class="keyword">import</span> time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;package.json&quot;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    jspack = json.load(f)</span><br><span class="line"></span><br><span class="line">new_version = <span class="string">&#x27;1.1.&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))[<span class="number">1</span>:<span class="number">11</span>:<span class="number">1</span>]</span><br><span class="line">jspack[<span class="string">&#x27;version&#x27;</span>]=new_version</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;package.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(jspack, f,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>ci配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">NPM</span> <span class="string">CDN</span></span><br><span class="line"><span class="attr">&#x27;on&#x27;:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">workflow_dispatch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">python3</span> <span class="string">new_version.py</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">JS-DevTools/npm-publish@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里就完成搭建了。</p><h2 id="Step-3-集成到Picgo"><a href="#Step-3-集成到Picgo" class="headerlink" title="Step.3 集成到Picgo"></a>Step.3 集成到Picgo</h2><p>Picgo是一个图床客户端，支持Github图床，可以更加方便的上传图片。</p><p>首先，我们去到<a href="https://github.com/Molunerfinn/PicGo">Picgo的仓库</a>，进入releases，随意选择一个版本，打开附件列表，下载对应系统的安装包，安装，并且打开Picgo，进入图床设置&#x3D;》GitHub图床，进行配置：</p><ul><li><strong>仓库名</strong>：储存图片的GitHub仓库，格式为<code>用户名/仓库名</code></li><li><strong>分支名</strong>：储存图片的仓库分支</li><li><strong>Token</strong>：你的GitHub密钥，在<a href="https://github.com/settings/tokens/new">这里</a>生成，按这张图片填写信息<img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220708210252.png"></li><li><strong>图片路径</strong>：不用管</li><li><strong>自定义域名</strong>：你的npm包在npm的路径，版本选择latest，这里以jsd为例：<code>https://cdn1.tianli0.top/npm/包名@latest/图片路径</code></li></ul><p>保存配置并设置为默认图床。</p><h2 id="编者的话"><a href="#编者的话" class="headerlink" title="编者的话"></a>编者的话</h2><p>终于把这篇文章写出来了，最近还搞好了新的评论系统——Artalk，大家有什么问题可以在下面评论，也可以闲聊，毕竟网站最近活跃不高，emm。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;图床，用于将本地的图片上传到互联网并生成唯一的直接链接，常常用于在网站中插入图片。目前市面上有许多的公用图床，体验也都还可以，但自己的图片放在别人的服务器多少有点不放心，要是跑路了更是直接玩完。此时有杠精要说了：“101，101，不是还有各大厂的对象储存吗”，您要是口袋比较</summary>
      
    
    
    
    <category term="白嫖之道" scheme="https://blog.redish101.top/categories/%E7%99%BD%E5%AB%96%E4%B9%8B%E9%81%93/"/>
    
    
    <category term="Picgo" scheme="https://blog.redish101.top/tags/Picgo/"/>
    
    <category term="图床" scheme="https://blog.redish101.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="Github Action" scheme="https://blog.redish101.top/tags/Github-Action/"/>
    
    <category term="npm" scheme="https://blog.redish101.top/tags/npm/"/>
    
    <category term="cdn" scheme="https://blog.redish101.top/tags/cdn/"/>
    
  </entry>
  
  <entry>
    <title>Github Codespaces初体验</title>
    <link href="https://blog.redish101.top/p/36200.html"/>
    <id>https://blog.redish101.top/p/36200.html</id>
    <published>2022-06-10T10:52:04.000Z</published>
    <updated>2022-06-19T10:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是什么"><a href="#这是什么" class="headerlink" title="这是什么"></a>这是什么</h1><p>在去年，GitHub上线了一个十分酷炫的新功能：<code>Codespaces</code>，使用Codespaces可以随时随地在浏览器里编辑、调试、运行托管在GitHub的代码，但这个功能一直在内测，只有企业才能申请使用。</p><p>但就在前几天，GitHub将此功能开放公测，任何用户都能申请使用，101早早的就收到了来自GitHub的邮件，于是便满心欢喜的来到了GitHub，美滋滋的体验了一番，于是就有了这篇文章。</p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220610210634.png" alt="101收到的邮件"></p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>先说性能，GitHub面对个人项目提供了一台4Cores 8RAM的机子，这性能对于普通的开发那是绰绰有余，话不多说，上bench截图：</p><p><img src="https://cdn1.tianli0.top/gh/Redish101/cdn@src/img/20220610211120.png" alt="bench测试结果"></p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>配置虽好值得夸赞，但这网络之遭也十分的影响使用，在笔者试用的时候，2个小时中断线了将近十次。虽然大部分时间下编辑器的使用没有发现明显卡顿，但终端在使用时的卡顿是真的让人无法忍受。</p><h2 id="终端相关"><a href="#终端相关" class="headerlink" title="终端相关"></a>终端相关</h2><p>Github Codespaces的终端是可以通过<code>sudo su</code>进入root用户的，也可以直接通过<code>sudo</code>命令来运行需要root权限的服务。</p><h2 id="自动休眠"><a href="#自动休眠" class="headerlink" title="自动休眠"></a>自动休眠</h2><p>这是非常重要的一个点，是我们白嫖之路的最大绊脚石，在一段时间（暂未明确结果）内如果编辑器没有活跃，codespace就会自动关闭，这导致一切</p><h1 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h1><p>Codespaces使用了web版本的VS Code，所以说编辑体验是与直接在本地使用Code编辑并无不同，经过测试，也能完美的适配各种插件。运行时方面也无需担心，已经自动预装了docker、python、node、c&#x2F;cpp等大部分语言的开发环境。</p><p>同时，如果在终端里启动程序的开发服务器时编辑器会自动发现开放的端口并映射到公网，默认是私有的，只有codespace的所有者才能访问，但是可以在图中的这个位置中更改穿透为对外公开，但是101奉劝各位早点死了用这个搭建什么服务的心吧，同GitHub一样，几乎是无法访问，在速度这方面，甚至比不上GitHub Pages。</p><h1 id="奇怪的技巧"><a href="#奇怪的技巧" class="headerlink" title="奇怪的技巧"></a>奇怪的技巧</h1><p>前面说了，直接使用自带的内网穿透速度很慢，几乎无法使用，不能搭建服务。</p><p>但是，别忘了我们还有很多第三方的内网穿透，只要选择合适的提供商，还是能确保不错的访问速度的。这里我推荐Cloudflare的<code>Argo Tunnel</code>，速度相当的不错。</p><h2 id="跑面板"><a href="#跑面板" class="headerlink" title="跑面板"></a>跑面板</h2><p>这里没有什么可以说的，直接跑appnode就行了。</p><h2 id="跑MacOS"><a href="#跑MacOS" class="headerlink" title="跑MacOS"></a>跑MacOS</h2><p>这个技巧就有点离谱了，其原理为通过docker跑macos之后使用vnc直接连接就好了，但是体验极差，不推荐。</p><h1 id="定价问题"><a href="#定价问题" class="headerlink" title="定价问题"></a>定价问题</h1><p>虽说现在Codespaces处在Beta阶段，不会收取任何一份费用，但是101没有得到任何确切的消息说Codespaces会免费。(其实很好理解，用脚趾头都能想出来，Github会这么大方，免费送给你4c8g的服务器？)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这是什么&quot;&gt;&lt;a href=&quot;#这是什么&quot; class=&quot;headerlink&quot; title=&quot;这是什么&quot;&gt;&lt;/a&gt;这是什么&lt;/h1&gt;&lt;p&gt;在去年，GitHub上线了一个十分酷炫的新功能：&lt;code&gt;Codespaces&lt;/code&gt;，使用Codespaces可以</summary>
      
    
    
    
    <category term="白嫖之道" scheme="https://blog.redish101.top/categories/%E7%99%BD%E5%AB%96%E4%B9%8B%E9%81%93/"/>
    
    
    <category term="Github" scheme="https://blog.redish101.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>如何才能把py文件编译为可执行文件？</title>
    <link href="https://blog.redish101.top/p/15511.html"/>
    <id>https://blog.redish101.top/p/15511.html</id>
    <published>2022-03-07T16:00:00.000Z</published>
    <updated>2022-03-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，烦人的甲方会要求我们把py程序编译为可执行文件，这时候要怎么办呢，用<strong>pyinstaller</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyinstaller</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller 你的文件.py</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候，烦人的甲方会要求我们把py程序编译为可执行文件，这时候要怎么办呢，用&lt;strong&gt;pyinstaller&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2</summary>
      
    
    
    
    <category term="Python教程" scheme="https://blog.redish101.top/categories/Python%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="pyinstaller" scheme="https://blog.redish101.top/tags/pyinstaller/"/>
    
  </entry>
  
  <entry>
    <title>docsify - 一个优雅的静态文档生成器</title>
    <link href="https://blog.redish101.top/p/45082.html"/>
    <id>https://blog.redish101.top/p/45082.html</id>
    <published>2022-03-04T16:00:00.000Z</published>
    <updated>2022-11-15T03:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docsify好在哪里"><a href="#docsify好在哪里" class="headerlink" title="docsify好在哪里"></a>docsify好在哪里</h2><p>开源项目的文档往往是一个很大的问题，许多静态站点生成器并不能兼顾<strong>强大</strong>与<strong>简单</strong>。</p><span id="more"></span><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><h4 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h4><p>先拿Sphinx来说吧，Sphinx因背后有python的驱动，功能十分强大，但是<code>reStructuredText</code>的复杂也劝退了许多人。</p><h4 id="Vuepress"><a href="#Vuepress" class="headerlink" title="Vuepress"></a>Vuepress</h4><p>相比之下，vuepress在文档的编写上就没有那么复杂了，毕竟<code>markdown</code>还是很简单的。<br>But，vuepress的配置实在是太复杂了，而且构建速度及其缓慢，最重要的是需要<code>JavaScript</code>的基础。</p><h4 id="mkdocs"><a href="#mkdocs" class="headerlink" title="mkdocs"></a>mkdocs</h4><p>mkdocs可以说是能和docsify抗衡了，但是，mkdocs需要构建</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>经过上面的的对比，docsify的优点已经很明显了，下面我们就来安装docsify</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>全局安装Docsify-cli:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn global add docsify-cli</span><br><span class="line"><span class="comment"># 或者使用npm</span></span><br></pre></td></tr></table></figure><h3 id="开始一个项目"><a href="#开始一个项目" class="headerlink" title="开始一个项目"></a>开始一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init &lt;项目路径&gt;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置也很简单，可以参考<a href="https://docsify.js.org/#/zh-cn/configuration">配置项 (docsify.js.org)</a></p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>这个更简单，只需要在<code>docs</code>文件夹里新建<code>markdown</code>文件即可。<br>(别说你不会，送你个指南<a href="https://markdown.com.cn/">Markdown 官方教程</a>)</p><h4 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h4><p>这里要注意一下路径：</p><p>假设你的目录结构如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── docs</span><br><span class="line">├── README.md</span><br><span class="line">├── guide.md</span><br><span class="line">└── zh-cn</span><br><span class="line">├── README.md</span><br><span class="line">└── guide.md</span><br></pre></td></tr></table></figure><p>那么渲染后的路径就是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docs/README.md        =&gt; http://domain.com</span><br><span class="line">docs/guide.md         =&gt; http://domain.com/guide</span><br><span class="line">docs/zh-cn/README.md  =&gt; http://domain.com/zh-cn/</span><br><span class="line">docs/zh-cn/guide.md   =&gt; http://domain.com/zh-cn/guide</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>将Github Pages的工作目录设置到docsify所在目录。</p><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p>选中docsify所在仓库，点击下面的deploy</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>具体我也不会用，只需要记住两点：</p><ul><li>无需构建</li><li>工作目录在根目录</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://docsify.js.org/#/zh-cn/">docsify中文文档</a></li><li><a href="https://vercel.com/docs">Introduction to Vercel – Vercel Docs</a></li><li><a href="https://segmentfault.com/a/1190000040063325?utm_source=tag-newest">Vercel 上自动部署你的个人博客 Hugo - SegmentFault 思否</a></li></ol><p>感谢阅读</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;docsify好在哪里&quot;&gt;&lt;a href=&quot;#docsify好在哪里&quot; class=&quot;headerlink&quot; title=&quot;docsify好在哪里&quot;&gt;&lt;/a&gt;docsify好在哪里&lt;/h2&gt;&lt;p&gt;开源项目的文档往往是一个很大的问题，许多静态站点生成器并不能兼顾&lt;strong&gt;强大&lt;/strong&gt;与&lt;strong&gt;简单&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://blog.redish101.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="docsify" scheme="https://blog.redish101.top/tags/docsify/"/>
    
    <category term="静态站点" scheme="https://blog.redish101.top/tags/%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>你好Hexo</title>
    <link href="https://blog.redish101.top/p/8071.html"/>
    <id>https://blog.redish101.top/p/8071.html</id>
    <published>2022-01-07T03:23:00.000Z</published>
    <updated>2022-07-01T13:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉之中，这个小站已经走过了将近200天，在这两百多天里，这个小站经历了数次博客框架的变换：</p><ul><li>Hexo&amp;Next：小站最初的样子。</li><li>Typecho：当时搞到了一台服务器，就挂了个动态</li><li>Wordpress：又知道了wp这个东西，但是过于臃肿，服务器吃不消，没几天又换了</li><li>Typecho：又换回了tp，用了一段时间</li><li>Hexo Fluid：到最后，发现还是hexo好用，换了回来，并且换了个主题</li><li>Hexo Butterfly：换了一个更耐看的主题，并写下了这篇短文</li></ul><p>就这样草草结束吧，希望这个博客能够一直存在着。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不知不觉之中，这个小站已经走过了将近200天，在这两百多天里，这个小站经历了数次博客框架的变换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hexo&amp;amp;Next：小站最初的样子。&lt;/li&gt;
&lt;li&gt;Typecho：当时搞到了一台服务器，就挂了个动态&lt;/li&gt;
&lt;li&gt;Wordpres</summary>
      
    
    
    
    <category term="Hexo教程" scheme="https://blog.redish101.top/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="静态博客" scheme="https://blog.redish101.top/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="https://blog.redish101.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
